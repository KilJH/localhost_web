{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/zknock/Develop/localhost_web/client/pages/users/[id].tsx\",\n    _this = this;\n\nimport Layout from '../../components/main/Layout';\nimport ListDetail from '../../components/user/ListDetail';\n\nvar StaticPropsDetail = function StaticPropsDetail(_ref) {\n  var pageProps = _ref.pageProps;\n  // if (pageProps.errors) {\n  // \treturn (\n  // \t\t<Layout title='Error | PlanBee🐝'>\n  // \t\t\t<p>\n  // \t\t\t\t<span style={{ color: 'red' }}>Error:</span> {pageProps.errors}\n  // \t\t\t</p>\n  // \t\t</Layout>\n  // \t);\n  // }\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    title: \"\".concat(pageProps.item ? pageProps.item.name : 'User Detail', \" | localhost\"),\n    children: pageProps.item && /*#__PURE__*/_jsxDEV(ListDetail, {\n      item: pageProps.item,\n      isFollowed: pageProps.isFollowed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 3\n  }, _this);\n};\n\n_c = StaticPropsDetail;\nexport var __N_SSP = true;\nexport default StaticPropsDetail; // export const getStaticPaths: GetStaticPaths = async () => {\n// \t// Get the paths we want to pre-render based on users\n// \tconst paths = await (\n// \t\tawait axios.get(`${SERVER}/api/user/list`)\n// \t).data.users.map((user) => ({\n// \t\tparams: { id: user.id.toString() },\n// \t}));\n// \t// We'll pre-render only these paths at build time.\n// \t// { fallback: false } means other routes should 404.\n// \treturn { paths, fallback: false };\n// };\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\n\nvar _c;\n\n$RefreshReg$(_c, \"StaticPropsDetail\");","map":{"version":3,"sources":["/Users/zknock/Develop/localhost_web/client/pages/users/[id].tsx"],"names":["Layout","ListDetail","StaticPropsDetail","pageProps","item","name","isFollowed"],"mappings":";;;;;AAGA,OAAOA,MAAP,MAAmB,8BAAnB;AACA,OAAOC,UAAP,MAAuB,kCAAvB;;AAeA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAA0B;AAAA,MAAvBC,SAAuB,QAAvBA,SAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,sBACC,QAAC,MAAD;AACC,IAAA,KAAK,YACJA,SAAS,CAACC,IAAV,GAAiBD,SAAS,CAACC,IAAV,CAAeC,IAAhC,GAAuC,aADnC,iBADN;AAAA,cAKEF,SAAS,CAACC,IAAV,iBACA,QAAC,UAAD;AAAY,MAAA,IAAI,EAAED,SAAS,CAACC,IAA5B;AAAkC,MAAA,UAAU,EAAED,SAAS,CAACG;AAAxD;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,WADD;AAWA,CAtBD;;KAAMJ,iB;;AAwBN,eAAeA,iBAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import { GetStaticProps, GetStaticPaths, GetServerSideProps } from 'next';\n\nimport { LoginProps, User } from '../../interfaces';\nimport Layout from '../../components/main/Layout';\nimport ListDetail from '../../components/user/ListDetail';\nimport axios from 'axios';\nimport SERVER from '../../utils/url';\nimport user from '../users';\nimport { useContext } from 'react';\nimport { UserStateContext } from '../../context/user';\n\ntype Props = {\n\tpageProps: {\n\t\titem?: User;\n\t\tisFollowed: boolean;\n\t\terrors?: string;\n\t};\n};\n\nconst StaticPropsDetail = ({ pageProps }: Props) => {\n\t// if (pageProps.errors) {\n\t// \treturn (\n\t// \t\t<Layout title='Error | PlanBee🐝'>\n\t// \t\t\t<p>\n\t// \t\t\t\t<span style={{ color: 'red' }}>Error:</span> {pageProps.errors}\n\t// \t\t\t</p>\n\t// \t\t</Layout>\n\t// \t);\n\t// }\n\n\treturn (\n\t\t<Layout\n\t\t\ttitle={`${\n\t\t\t\tpageProps.item ? pageProps.item.name : 'User Detail'\n\t\t\t} | localhost`}\n\t\t>\n\t\t\t{pageProps.item && (\n\t\t\t\t<ListDetail item={pageProps.item} isFollowed={pageProps.isFollowed} />\n\t\t\t)}\n\t\t</Layout>\n\t);\n};\n\nexport default StaticPropsDetail;\n\n// export const getStaticPaths: GetStaticPaths = async () => {\n// \t// Get the paths we want to pre-render based on users\n// \tconst paths = await (\n// \t\tawait axios.get(`${SERVER}/api/user/list`)\n// \t).data.users.map((user) => ({\n// \t\tparams: { id: user.id.toString() },\n// \t}));\n\n// \t// We'll pre-render only these paths at build time.\n// \t// { fallback: false } means other routes should 404.\n// \treturn { paths, fallback: false };\n// };\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport const getServerSideProps: GetServerSideProps = async context => {\n\ttry {\n\t\tconst id = context.params?.id;\n\t\tconst item = await (await axios.get(`${SERVER}/api/user/${id}`)).data.user;\n\t\tconst res = await axios.post(\n\t\t\t`${SERVER}/api/auth/check`,\n\t\t\t{ token: context.req.cookies.token },\n\t\t\t{ withCredentials: true },\n\t\t);\n\t\tconst isFollowed = await (\n\t\t\tawait axios.post(`${SERVER}/api/user/follow_check`, {\n\t\t\t\tuserId: id,\n\t\t\t\tfollowerId: res.data.user.id,\n\t\t\t})\n\t\t).data.isFollowed;\n\n\t\treturn { props: { item, isFollowed } };\n\t} catch (err) {\n\t\treturn { props: { errors: err.message } };\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}