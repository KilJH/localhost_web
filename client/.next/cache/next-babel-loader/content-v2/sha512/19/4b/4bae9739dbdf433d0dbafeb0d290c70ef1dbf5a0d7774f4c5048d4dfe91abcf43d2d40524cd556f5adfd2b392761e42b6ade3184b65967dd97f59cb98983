{"ast":null,"code":"import axios from 'axios';\nimport SERVER from '../../../utils/url';\nimport { useAsync } from 'react-async'; // isLogined\n// 0: 아무나 볼 수 있음, 1: 로그인한 회원만 볼 수 있음, 2: 게스트만 볼 수 있음\n// grade\n// 0: 아무나 볼 수 있음, 2: 호스트회원만 볼 수 있음, 3: 관리자회원만 볼 수 있음\n\nconst getAuth = async () => {\n  const res = await axios.get(`${SERVER}/api/auth/check`, {\n    withCredentials: true\n  });\n  return res.data;\n};\n\nconst withAuth = (isLogined, grade) => Component => {\n  return () => {\n    const {\n      data,\n      isLoading,\n      error\n    } = useAsync({\n      promiseFn: getAuth\n    });\n    axios.get(`${SERVER}/api/auth/check`, {\n      withCredentials: true\n    }).then(res => {\n      const user = res.data.user;\n\n      if (res.data.success) {\n        console.log('로그인되어있습니다.');\n\n        if (isLogined === 2) {\n          alert('이미 로그인되어있습니다.');\n          location.href = '/';\n        }\n\n        switch (grade) {\n          // 아무나\n          case 0:\n            return Component;\n          // 호스트\n\n          case 1:\n            if (user.isHost) return Component;\n            alert('접근할 수 없는 페이지 입니다.');\n            location.href = '/';\n          // 관리자\n\n          case 2:\n            if (user.isAdmin) return Component;\n            alert('접근할 수 없는 페이지 입니다.');\n            location.href = '/';\n        }\n      } else {\n        // 로그인되지않음\n        console.log('로그인을 해주세요.');\n        console.log(res.data.message, '이것은 에러');\n\n        if (isLogined === 1) {\n          alert('로그인을 해주세요.');\n          location.href = '/login';\n        } else {\n          return Component;\n        }\n      }\n    });\n    return Component;\n  };\n};\n\nexport default withAuth;","map":{"version":3,"sources":["/Users/zknock/Develop/localhost_web/client/components/main/hoc/withAuth.tsx"],"names":["axios","SERVER","useAsync","getAuth","res","get","withCredentials","data","withAuth","isLogined","grade","Component","isLoading","error","promiseFn","then","user","success","console","log","alert","location","href","isHost","isAdmin","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,oBAAnB;AAGA,SAASC,QAAT,QAAyB,aAAzB,C,CAEA;AACA;AAEA;AACA;;AAEA,MAAMC,OAAO,GAAG,YAAY;AAC3B,QAAMC,GAAG,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAW,GAAEJ,MAAO,iBAApB,EAAsC;AACvDK,IAAAA,eAAe,EAAE;AADsC,GAAtC,CAAlB;AAIA,SAAOF,GAAG,CAACG,IAAX;AACA,CAND;;AAQA,MAAMC,QAAQ,GAAG,CAACC,SAAD,EAAoBC,KAApB,KAChBC,SADsD,IAElD;AACJ,SAAO,MAAM;AACZ,UAAM;AAAEJ,MAAAA,IAAF;AAAQK,MAAAA,SAAR;AAAmBC,MAAAA;AAAnB,QAA6BX,QAAQ,CAAC;AAC3CY,MAAAA,SAAS,EAAEX;AADgC,KAAD,CAA3C;AAIAH,IAAAA,KAAK,CACHK,GADF,CACO,GAAEJ,MAAO,iBADhB,EACkC;AAAEK,MAAAA,eAAe,EAAE;AAAnB,KADlC,EAEES,IAFF,CAEOX,GAAG,IAAI;AACZ,YAAMY,IAAU,GAAGZ,GAAG,CAACG,IAAJ,CAASS,IAA5B;;AACA,UAAIZ,GAAG,CAACG,IAAJ,CAASU,OAAb,EAAsB;AACrBC,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AACA,YAAIV,SAAS,KAAK,CAAlB,EAAqB;AACpBW,UAAAA,KAAK,CAAC,eAAD,CAAL;AACAC,UAAAA,QAAQ,CAACC,IAAT,GAAgB,GAAhB;AACA;;AACD,gBAAQZ,KAAR;AACC;AACA,eAAK,CAAL;AACC,mBAAOC,SAAP;AACD;;AACA,eAAK,CAAL;AACC,gBAAIK,IAAI,CAACO,MAAT,EAAiB,OAAOZ,SAAP;AACjBS,YAAAA,KAAK,CAAC,mBAAD,CAAL;AACAC,YAAAA,QAAQ,CAACC,IAAT,GAAgB,GAAhB;AACD;;AACA,eAAK,CAAL;AACC,gBAAIN,IAAI,CAACQ,OAAT,EAAkB,OAAOb,SAAP;AAClBS,YAAAA,KAAK,CAAC,mBAAD,CAAL;AACAC,YAAAA,QAAQ,CAACC,IAAT,GAAgB,GAAhB;AAbF;AAeA,OArBD,MAqBO;AACN;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYf,GAAG,CAACG,IAAJ,CAASkB,OAArB,EAA8B,QAA9B;;AAEA,YAAIhB,SAAS,KAAK,CAAlB,EAAqB;AACpBW,UAAAA,KAAK,CAAC,YAAD,CAAL;AACAC,UAAAA,QAAQ,CAACC,IAAT,GAAgB,QAAhB;AACA,SAHD,MAGO;AACN,iBAAOX,SAAP;AACA;AACD;AACD,KArCF;AAuCA,WAAOA,SAAP;AACA,GA7CD;AA8CA,CAjDD;;AAmDA,eAAeH,QAAf","sourcesContent":["import axios from 'axios';\nimport React, { ReactNode } from 'react';\nimport SERVER from '../../../utils/url';\nimport Router from 'next/router';\nimport { User } from '../../../interfaces';\nimport { useAsync } from 'react-async';\n\n// isLogined\n// 0: 아무나 볼 수 있음, 1: 로그인한 회원만 볼 수 있음, 2: 게스트만 볼 수 있음\n\n// grade\n// 0: 아무나 볼 수 있음, 2: 호스트회원만 볼 수 있음, 3: 관리자회원만 볼 수 있음\n\nconst getAuth = async () => {\n\tconst res = await axios.get(`${SERVER}/api/auth/check`, {\n\t\twithCredentials: true,\n\t});\n\n\treturn res.data;\n};\n\nconst withAuth = (isLogined: number, grade: number) => (\n\tComponent: ReactNode,\n) => {\n\treturn () => {\n\t\tconst { data, isLoading, error } = useAsync({\n\t\t\tpromiseFn: getAuth,\n\t\t});\n\n\t\taxios\n\t\t\t.get(`${SERVER}/api/auth/check`, { withCredentials: true })\n\t\t\t.then(res => {\n\t\t\t\tconst user: User = res.data.user;\n\t\t\t\tif (res.data.success) {\n\t\t\t\t\tconsole.log('로그인되어있습니다.');\n\t\t\t\t\tif (isLogined === 2) {\n\t\t\t\t\t\talert('이미 로그인되어있습니다.');\n\t\t\t\t\t\tlocation.href = '/';\n\t\t\t\t\t}\n\t\t\t\t\tswitch (grade) {\n\t\t\t\t\t\t// 아무나\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\treturn Component;\n\t\t\t\t\t\t// 호스트\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tif (user.isHost) return Component;\n\t\t\t\t\t\t\talert('접근할 수 없는 페이지 입니다.');\n\t\t\t\t\t\t\tlocation.href = '/';\n\t\t\t\t\t\t// 관리자\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tif (user.isAdmin) return Component;\n\t\t\t\t\t\t\talert('접근할 수 없는 페이지 입니다.');\n\t\t\t\t\t\t\tlocation.href = '/';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// 로그인되지않음\n\t\t\t\t\tconsole.log('로그인을 해주세요.');\n\t\t\t\t\tconsole.log(res.data.message, '이것은 에러');\n\n\t\t\t\t\tif (isLogined === 1) {\n\t\t\t\t\t\talert('로그인을 해주세요.');\n\t\t\t\t\t\tlocation.href = '/login';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Component;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn Component;\n\t};\n};\n\nexport default withAuth;\n"]},"metadata":{},"sourceType":"module"}