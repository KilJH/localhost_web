{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/zknock/Develop/localhost_web/client/context/user.js\";\nimport React, { createContext, useState } from 'react';\nexport const UserStateContext = /*#__PURE__*/createContext({\n  id: 0,\n  email: '',\n  password: '',\n  name: '',\n  nickname: '',\n  phone: '',\n  address: '',\n  photo: ''\n}); // type UserSetter = Dispatch<SetStateAction<User>>;\n\nexport const UserSetterContext = /*#__PURE__*/createContext(user => {\n  console.log('setUser() is default');\n});\nexport const UserContextProvider = ({\n  value,\n  children\n}) => {\n  const {\n    0: user,\n    1: setUser\n  } = useState({\n    id: 0,\n    email: '',\n    password: '',\n    name: '',\n    nickname: '',\n    phone: '',\n    address: '',\n    photo: ''\n  });\n  return /*#__PURE__*/_jsxDEV(UserSetterContext.Provider, {\n    value: value.setUser || setUser,\n    children: /*#__PURE__*/_jsxDEV(UserStateContext.Provider, {\n      value: value.user || user,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 3\n  }, this);\n}; // export const useUserState = () => {\n// \tconst state = useContext(UserStateContext);\n// \treturn state;\n// };\n// export const useUserDispatch = () => {\n// \tconst dispatch = useContext(UserSetterContext);\n// \t// if (!dispatch) throw new Error('UserProvider not found');\n// \treturn dispatch;\n// };","map":{"version":3,"sources":["/Users/zknock/Develop/localhost_web/client/context/user.js"],"names":["React","createContext","useState","UserStateContext","id","email","password","name","nickname","phone","address","photo","UserSetterContext","user","console","log","UserContextProvider","value","children","setUser"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AAEA,OAAO,MAAMC,gBAAgB,gBAAGF,aAAa,CAAC;AAC7CG,EAAAA,EAAE,EAAE,CADyC;AAE7CC,EAAAA,KAAK,EAAE,EAFsC;AAG7CC,EAAAA,QAAQ,EAAE,EAHmC;AAI7CC,EAAAA,IAAI,EAAE,EAJuC;AAK7CC,EAAAA,QAAQ,EAAE,EALmC;AAM7CC,EAAAA,KAAK,EAAE,EANsC;AAO7CC,EAAAA,OAAO,EAAE,EAPoC;AAQ7CC,EAAAA,KAAK,EAAE;AARsC,CAAD,CAAtC,C,CAWP;;AAEA,OAAO,MAAMC,iBAAiB,gBAAGX,aAAa,CAACY,IAAI,IAAI;AACtDC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,CAF6C,CAAvC;AAIP,OAAO,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAyB;AAC3D,QAAM;AAAA,OAACL,IAAD;AAAA,OAAOM;AAAP,MAAkBjB,QAAQ,CAAC;AAChCE,IAAAA,EAAE,EAAE,CAD4B;AAEhCC,IAAAA,KAAK,EAAE,EAFyB;AAGhCC,IAAAA,QAAQ,EAAE,EAHsB;AAIhCC,IAAAA,IAAI,EAAE,EAJ0B;AAKhCC,IAAAA,QAAQ,EAAE,EALsB;AAMhCC,IAAAA,KAAK,EAAE,EANyB;AAOhCC,IAAAA,OAAO,EAAE,EAPuB;AAQhCC,IAAAA,KAAK,EAAE;AARyB,GAAD,CAAhC;AAUA,sBACC,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAEM,KAAK,CAACE,OAAN,IAAiBA,OAApD;AAAA,2BACC,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,MAAA,KAAK,EAAEF,KAAK,CAACJ,IAAN,IAAcA,IAAhD;AAAA,gBACEK;AADF;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAOA,CAlBM,C,CAoBP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { createContext, useState } from 'react';\n\nexport const UserStateContext = createContext({\n\tid: 0,\n\temail: '',\n\tpassword: '',\n\tname: '',\n\tnickname: '',\n\tphone: '',\n\taddress: '',\n\tphoto: '',\n});\n\n// type UserSetter = Dispatch<SetStateAction<User>>;\n\nexport const UserSetterContext = createContext(user => {\n\tconsole.log('setUser() is default');\n});\n\nexport const UserContextProvider = ({ value, children }) => {\n\tconst [user, setUser] = useState({\n\t\tid: 0,\n\t\temail: '',\n\t\tpassword: '',\n\t\tname: '',\n\t\tnickname: '',\n\t\tphone: '',\n\t\taddress: '',\n\t\tphoto: '',\n\t});\n\treturn (\n\t\t<UserSetterContext.Provider value={value.setUser || setUser}>\n\t\t\t<UserStateContext.Provider value={value.user || user}>\n\t\t\t\t{children}\n\t\t\t</UserStateContext.Provider>\n\t\t</UserSetterContext.Provider>\n\t);\n};\n\n// export const useUserState = () => {\n// \tconst state = useContext(UserStateContext);\n// \treturn state;\n// };\n\n// export const useUserDispatch = () => {\n// \tconst dispatch = useContext(UserSetterContext);\n// \t// if (!dispatch) throw new Error('UserProvider not found');\n// \treturn dispatch;\n// };\n"]},"metadata":{},"sourceType":"module"}