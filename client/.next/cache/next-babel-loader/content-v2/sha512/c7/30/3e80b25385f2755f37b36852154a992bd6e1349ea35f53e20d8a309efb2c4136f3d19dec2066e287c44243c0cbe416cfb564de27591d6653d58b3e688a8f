{"ast":null,"code":"import axios from 'axios';\nimport SERVER from '../../../utils/url';\nimport Router from 'next/router';\n\n// isLogined\n// 0: 아무나 볼 수 있음, 1: 로그인한 회원만 볼 수 있음, 2: 게스트만 볼 수 있음\n// grade\n// 0: 아무나 볼 수 있음, 2: 호스트회원만 볼 수 있음, 3: 관리자회원만 볼 수 있음\nvar withAuth = function withAuth(isLogined, grade) {\n  return function (Component) {\n    axios.get(\"\".concat(SERVER, \"/api/auth/check\"), {\n      withCredentials: true\n    }).then(function (res) {\n      var user = res.data.user;\n\n      if (res.data.success) {\n        console.log('로그인되어있습니다.');\n\n        if (isLogined === 2) {\n          alert('이미 로그인되어있습니다.');\n          Router.push('/');\n        }\n\n        switch (grade) {\n          // 아무나\n          case 0:\n            return Component;\n          // 호스트\n\n          case 1:\n            if (user.isHost) return Component;\n            alert('접근할 수 없는 페이지 입니다.');\n            Router.push('/');\n          // 관리자\n\n          case 2:\n            if (user.isAdmin) return Component;\n            alert('접근할 수 없는 페이지 입니다.');\n            Router.push('/');\n        }\n      } else {\n        // 로그인되지않음\n        console.log('로그인을 해주세요.');\n        console.log(res.data.message, '이것은 에러');\n\n        if (isLogined === 1) {\n          Router.push('/login');\n        } else {\n          return Component;\n        }\n      }\n    }); // return Component;\n  };\n};\n\nexport default withAuth;","map":{"version":3,"sources":["/Users/zknock/Develop/localhost_web/client/components/main/hoc/withAuth.tsx"],"names":["axios","SERVER","Router","withAuth","isLogined","grade","Component","get","withCredentials","then","res","user","data","success","console","log","alert","push","isHost","isAdmin","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAGA;AACA;AAEA;AACA;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,SAAD,EAAoBC,KAApB;AAAA,SAAsC,UACtDC,SADsD,EAElD;AACJN,IAAAA,KAAK,CAACO,GAAN,WAAaN,MAAb,sBAAsC;AAAEO,MAAAA,eAAe,EAAE;AAAnB,KAAtC,EAAiEC,IAAjE,CAAsE,UAAAC,GAAG,EAAI;AAC5E,UAAMC,IAAU,GAAGD,GAAG,CAACE,IAAJ,CAASD,IAA5B;;AACA,UAAID,GAAG,CAACE,IAAJ,CAASC,OAAb,EAAsB;AACrBC,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AACA,YAAIX,SAAS,KAAK,CAAlB,EAAqB;AACpBY,UAAAA,KAAK,CAAC,eAAD,CAAL;AACAd,UAAAA,MAAM,CAACe,IAAP,CAAY,GAAZ;AACA;;AACD,gBAAQZ,KAAR;AACC;AACA,eAAK,CAAL;AACC,mBAAOC,SAAP;AACD;;AACA,eAAK,CAAL;AACC,gBAAIK,IAAI,CAACO,MAAT,EAAiB,OAAOZ,SAAP;AACjBU,YAAAA,KAAK,CAAC,mBAAD,CAAL;AACAd,YAAAA,MAAM,CAACe,IAAP,CAAY,GAAZ;AACD;;AACA,eAAK,CAAL;AACC,gBAAIN,IAAI,CAACQ,OAAT,EAAkB,OAAOb,SAAP;AAClBU,YAAAA,KAAK,CAAC,mBAAD,CAAL;AACAd,YAAAA,MAAM,CAACe,IAAP,CAAY,GAAZ;AAbF;AAeA,OArBD,MAqBO;AACN;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACE,IAAJ,CAASQ,OAArB,EAA8B,QAA9B;;AAEA,YAAIhB,SAAS,KAAK,CAAlB,EAAqB;AACpBF,UAAAA,MAAM,CAACe,IAAP,CAAY,QAAZ;AACA,SAFD,MAEO;AACN,iBAAOX,SAAP;AACA;AACD;AACD,KAlCD,EADI,CAqCJ;AACA,GAxCgB;AAAA,CAAjB;;AA0CA,eAAeH,QAAf","sourcesContent":["import axios from 'axios';\nimport React, { ReactNode } from 'react';\nimport SERVER from '../../../utils/url';\nimport Router from 'next/router';\nimport { User } from '../../../interfaces';\n\n// isLogined\n// 0: 아무나 볼 수 있음, 1: 로그인한 회원만 볼 수 있음, 2: 게스트만 볼 수 있음\n\n// grade\n// 0: 아무나 볼 수 있음, 2: 호스트회원만 볼 수 있음, 3: 관리자회원만 볼 수 있음\n\nconst withAuth = (isLogined: number, grade: number) => (\n\tComponent: ReactNode,\n) => {\n\taxios.get(`${SERVER}/api/auth/check`, { withCredentials: true }).then(res => {\n\t\tconst user: User = res.data.user;\n\t\tif (res.data.success) {\n\t\t\tconsole.log('로그인되어있습니다.');\n\t\t\tif (isLogined === 2) {\n\t\t\t\talert('이미 로그인되어있습니다.');\n\t\t\t\tRouter.push('/');\n\t\t\t}\n\t\t\tswitch (grade) {\n\t\t\t\t// 아무나\n\t\t\t\tcase 0:\n\t\t\t\t\treturn Component;\n\t\t\t\t// 호스트\n\t\t\t\tcase 1:\n\t\t\t\t\tif (user.isHost) return Component;\n\t\t\t\t\talert('접근할 수 없는 페이지 입니다.');\n\t\t\t\t\tRouter.push('/');\n\t\t\t\t// 관리자\n\t\t\t\tcase 2:\n\t\t\t\t\tif (user.isAdmin) return Component;\n\t\t\t\t\talert('접근할 수 없는 페이지 입니다.');\n\t\t\t\t\tRouter.push('/');\n\t\t\t}\n\t\t} else {\n\t\t\t// 로그인되지않음\n\t\t\tconsole.log('로그인을 해주세요.');\n\t\t\tconsole.log(res.data.message, '이것은 에러');\n\n\t\t\tif (isLogined === 1) {\n\t\t\t\tRouter.push('/login');\n\t\t\t} else {\n\t\t\t\treturn Component;\n\t\t\t}\n\t\t}\n\t});\n\n\t// return Component;\n};\n\nexport default withAuth;\n"]},"metadata":{},"sourceType":"module"}