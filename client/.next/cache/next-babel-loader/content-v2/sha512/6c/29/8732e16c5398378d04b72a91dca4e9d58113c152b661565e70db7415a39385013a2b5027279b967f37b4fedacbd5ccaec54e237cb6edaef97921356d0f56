{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = resolveRewrites;\n\nvar _pathMatch = _interopRequireDefault(require(\"./path-match\"));\n\nvar _prepareDestination = _interopRequireDefault(require(\"./prepare-destination\"));\n\nvar _normalizeTrailingSlash = require(\"../../../../client/normalize-trailing-slash\");\n\nvar _normalizeLocalePath = require(\"../../i18n/normalize-locale-path\");\n\nvar _parseRelativeUrl = require(\"./parse-relative-url\");\n\nvar _router = require(\"../router\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst customRouteMatcher = (0, _pathMatch.default)(true);\n\nfunction resolveRewrites(asPath, pages, rewrites, query, resolveHref, locales) {\n  let matchedPage = false;\n  let parsedAs = (0, _parseRelativeUrl.parseRelativeUrl)(asPath);\n  let fsPathname = (0, _normalizeTrailingSlash.removePathTrailingSlash)((0, _normalizeLocalePath.normalizeLocalePath)((0, _router.delBasePath)(parsedAs.pathname), locales).pathname);\n  let resolvedHref;\n\n  if (!pages.includes(fsPathname)) {\n    for (const rewrite of rewrites) {\n      const matcher = customRouteMatcher(rewrite.source);\n      const params = matcher(parsedAs.pathname);\n\n      if (params) {\n        if (!rewrite.destination) {\n          // this is a proxied rewrite which isn't handled on the client\n          break;\n        }\n\n        const destRes = (0, _prepareDestination.default)(rewrite.destination, params, query, true);\n        parsedAs = destRes.parsedDestination;\n        asPath = destRes.newUrl;\n        Object.assign(query, destRes.parsedDestination.query);\n        fsPathname = (0, _normalizeTrailingSlash.removePathTrailingSlash)((0, _normalizeLocalePath.normalizeLocalePath)((0, _router.delBasePath)(asPath), locales).pathname);\n\n        if (pages.includes(fsPathname)) {\n          // check if we now match a page as this means we are done\n          // resolving the rewrites\n          matchedPage = true;\n          resolvedHref = fsPathname;\n          break;\n        } // check if we match a dynamic-route, if so we break the rewrites chain\n\n\n        resolvedHref = resolveHref(fsPathname);\n\n        if (resolvedHref !== asPath && pages.includes(resolvedHref)) {\n          matchedPage = true;\n          break;\n        }\n      }\n    }\n  }\n\n  return {\n    asPath,\n    parsedAs,\n    matchedPage,\n    resolvedHref\n  };\n}","map":{"version":3,"sources":["../../../../../next-server/lib/router/utils/resolve-rewrites.ts"],"names":["customRouteMatcher","matchedPage","parsedAs","fsPathname","pages","matcher","rewrite","params","destRes","asPath","Object","resolvedHref","resolveHref"],"mappings":";;;;;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,IAAA,mBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CAAA;;AAEA,IAAA,uBAAA,GAAA,OAAA,CAAA,6CAAA,CAAA;;AACA,IAAA,oBAAA,GAAA,OAAA,CAAA,kCAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;;;;;AAEA;;AAAA,MAAMA,kBAAkB,GAAG,CAAA,GAAA,UAAA,CAAA,OAAA,EAA3B,IAA2B,CAA3B;;AAEe,SAAA,eAAA,CAAA,MAAA,EAAA,KAAA,EAAA,QAAA,EAAA,KAAA,EAAA,WAAA,EAAA,OAAA,EAYb;AACA,MAAIC,WAAW,GAAf,KAAA;AACA,MAAIC,QAAQ,GAAG,CAAA,GAAA,iBAAA,CAAA,gBAAA,EAAf,MAAe,CAAf;AACA,MAAIC,UAAU,GAAG,CAAA,GAAA,uBAAA,CAAA,uBAAA,EACf,CAAA,GAAA,oBAAA,CAAA,mBAAA,EAAoB,CAAA,GAAA,OAAA,CAAA,WAAA,EAAYD,QAAQ,CAAxC,QAAoB,CAApB,EAAA,OAAA,EADF,QAAiB,CAAjB;AAGA,MAAA,YAAA;;AAEA,MAAI,CAACE,KAAK,CAALA,QAAAA,CAAL,UAAKA,CAAL,EAAiC;AAC/B,SAAK,MAAL,OAAA,IAAA,QAAA,EAAgC;AAC9B,YAAMC,OAAO,GAAGL,kBAAkB,CAACM,OAAO,CAA1C,MAAkC,CAAlC;AACA,YAAMC,MAAM,GAAGF,OAAO,CAACH,QAAQ,CAA/B,QAAsB,CAAtB;;AAEA,UAAA,MAAA,EAAY;AACV,YAAI,CAACI,OAAO,CAAZ,WAAA,EAA0B;AACxB;AACA;AAEF;;AAAA,cAAME,OAAO,GAAG,CAAA,GAAA,mBAAA,CAAA,OAAA,EACdF,OAAO,CADO,WAAA,EAAA,MAAA,EAAA,KAAA,EAAhB,IAAgB,CAAhB;AAMAJ,QAAAA,QAAQ,GAAGM,OAAO,CAAlBN,iBAAAA;AACAO,QAAAA,MAAM,GAAGD,OAAO,CAAhBC,MAAAA;AACAC,QAAAA,MAAM,CAANA,MAAAA,CAAAA,KAAAA,EAAqBF,OAAO,CAAPA,iBAAAA,CAArBE,KAAAA;AAEAP,QAAAA,UAAU,GAAG,CAAA,GAAA,uBAAA,CAAA,uBAAA,EACX,CAAA,GAAA,oBAAA,CAAA,mBAAA,EAAoB,CAAA,GAAA,OAAA,CAAA,WAAA,EAApB,MAAoB,CAApB,EAAA,OAAA,EADFA,QAAa,CAAbA;;AAIA,YAAIC,KAAK,CAALA,QAAAA,CAAJ,UAAIA,CAAJ,EAAgC;AAC9B;AACA;AACAH,UAAAA,WAAW,GAAXA,IAAAA;AACAU,UAAAA,YAAY,GAAZA,UAAAA;AACA;AAGF,SA3BU,CA2BV;;;AACAA,QAAAA,YAAY,GAAGC,WAAW,CAA1BD,UAA0B,CAA1BA;;AAEA,YAAIA,YAAY,KAAZA,MAAAA,IAA2BP,KAAK,CAALA,QAAAA,CAA/B,YAA+BA,CAA/B,EAA6D;AAC3DH,UAAAA,WAAW,GAAXA,IAAAA;AACA;AAEH;AACF;AACF;AACD;;AAAA,SAAO;AAAA,IAAA,MAAA;AAAA,IAAA,QAAA;AAAA,IAAA,WAAA;AAAP,IAAA;AAAO,GAAP;AAMD","sourcesContent":["import { ParsedUrlQuery } from 'querystring'\nimport pathMatch from './path-match'\nimport prepareDestination from './prepare-destination'\nimport { Rewrite } from '../../../../lib/load-custom-routes'\nimport { removePathTrailingSlash } from '../../../../client/normalize-trailing-slash'\nimport { normalizeLocalePath } from '../../i18n/normalize-locale-path'\nimport { parseRelativeUrl } from './parse-relative-url'\nimport { delBasePath } from '../router'\n\nconst customRouteMatcher = pathMatch(true)\n\nexport default function resolveRewrites(\n  asPath: string,\n  pages: string[],\n  rewrites: Rewrite[],\n  query: ParsedUrlQuery,\n  resolveHref: (path: string) => string,\n  locales?: string[]\n): {\n  matchedPage: boolean\n  parsedAs: ReturnType<typeof parseRelativeUrl>\n  asPath: string\n  resolvedHref?: string\n} {\n  let matchedPage = false\n  let parsedAs = parseRelativeUrl(asPath)\n  let fsPathname = removePathTrailingSlash(\n    normalizeLocalePath(delBasePath(parsedAs.pathname), locales).pathname\n  )\n  let resolvedHref\n\n  if (!pages.includes(fsPathname)) {\n    for (const rewrite of rewrites) {\n      const matcher = customRouteMatcher(rewrite.source)\n      const params = matcher(parsedAs.pathname)\n\n      if (params) {\n        if (!rewrite.destination) {\n          // this is a proxied rewrite which isn't handled on the client\n          break\n        }\n        const destRes = prepareDestination(\n          rewrite.destination,\n          params,\n          query,\n          true\n        )\n        parsedAs = destRes.parsedDestination\n        asPath = destRes.newUrl\n        Object.assign(query, destRes.parsedDestination.query)\n\n        fsPathname = removePathTrailingSlash(\n          normalizeLocalePath(delBasePath(asPath), locales).pathname\n        )\n\n        if (pages.includes(fsPathname)) {\n          // check if we now match a page as this means we are done\n          // resolving the rewrites\n          matchedPage = true\n          resolvedHref = fsPathname\n          break\n        }\n\n        // check if we match a dynamic-route, if so we break the rewrites chain\n        resolvedHref = resolveHref(fsPathname)\n\n        if (resolvedHref !== asPath && pages.includes(resolvedHref)) {\n          matchedPage = true\n          break\n        }\n      }\n    }\n  }\n  return {\n    asPath,\n    parsedAs,\n    matchedPage,\n    resolvedHref,\n  }\n}\n"]},"metadata":{},"sourceType":"script"}