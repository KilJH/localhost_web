{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/zknock/Develop/localhost_web/client/components/main/hoc/withAuth.tsx\";\nimport axios from 'axios';\nimport React from 'react';\nimport SERVER from '../../../utils/url';\nimport Router from 'next/router';\nimport { useAsync } from 'react-async'; // isLogined\n// 0: 아무나 볼 수 있음, 1: 로그인한 회원만 볼 수 있음, 2: 게스트만 볼 수 있음\n// grade\n// 0: 아무나 볼 수 있음, 2: 호스트회원만 볼 수 있음, 3: 관리자회원만 볼 수 있음\n\nconst getAuth = async () => {\n  const res = await axios.get(`${SERVER}/api/auth/check`, {\n    withCredentials: true\n  });\n  return res.data;\n};\n\nconst withAuth = (isLogined, grade) => Component => {\n  const {\n    data,\n    error,\n    isLoading\n  } = useAsync({\n    promiseFn: getAuth\n  });\n  if (isLoading) return () => /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontSize: '0.5em',\n      color: '#e74c3c'\n    },\n    children: \"\\uD314\\uB85C\\uC6B0\\uC815\\uBCF4\\uB97C \\uAC00\\uC838\\uC624\\uC9C0\\uBABB\\uD588\\uC2B5\\uB2C8\\uB2E4.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 4\n  }, this);\n  if (!data) return null;\n  const user = data.user;\n\n  if (data.success) {\n    console.log('로그인되어있습니다.');\n\n    if (isLogined === 2) {\n      alert('이미 로그인되어있습니다.');\n      Router.push('/');\n    }\n\n    switch (grade) {\n      // 아무나\n      case 0:\n        return Component;\n      // 호스트\n\n      case 1:\n        if (user.isHost) return Component;\n        alert('접근할 수 없는 페이지 입니다.');\n        Router.push('/');\n      // 관리자\n\n      case 2:\n        if (user.isAdmin) return Component;\n        alert('접근할 수 없는 페이지 입니다.');\n        Router.push('/');\n    }\n  } else {\n    // 로그인되지않음\n    console.log('로그인을 해주세요.');\n    console.log(data.message, '이것은 에러');\n\n    if (isLogined === 1) {\n      Router.push('/login');\n    } else {\n      return Component;\n    }\n  } // axios.get(`${SERVER}/api/auth/check`, { withCredentials: true }).then(res => {\n  // \tconst user: User = res.data.user;\n  // \tif (res.data.success) {\n  // \t\tconsole.log('로그인되어있습니다.');\n  // \t\tif (isLogined === 2) {\n  // \t\t\talert('이미 로그인되어있습니다.');\n  // \t\t\tRouter.push('/');\n  // \t\t}\n  // \t\tswitch (grade) {\n  // \t\t\t// 아무나\n  // \t\t\tcase 0:\n  // \t\t\t\treturn Component;\n  // \t\t\t// 호스트\n  // \t\t\tcase 1:\n  // \t\t\t\tif (user.isHost) return Component;\n  // \t\t\t\talert('접근할 수 없는 페이지 입니다.');\n  // \t\t\t\tRouter.push('/');\n  // \t\t\t// 관리자\n  // \t\t\tcase 2:\n  // \t\t\t\tif (user.isAdmin) return Component;\n  // \t\t\t\talert('접근할 수 없는 페이지 입니다.');\n  // \t\t\t\tRouter.push('/');\n  // \t\t}\n  // \t} else {\n  // \t\t// 로그인되지않음\n  // \t\tconsole.log('로그인을 해주세요.');\n  // \t\tconsole.log(res.data.message, '이것은 에러');\n  // \t\tif (isLogined === 1) {\n  // \t\t\tRouter.push('/login');\n  // \t\t} else {\n  // \t\t\treturn Component;\n  // \t\t}\n  // \t}\n  // });\n\n\n  return Component;\n};\n\nexport default withAuth;","map":{"version":3,"sources":["/Users/zknock/Develop/localhost_web/client/components/main/hoc/withAuth.tsx"],"names":["axios","React","SERVER","Router","useAsync","getAuth","res","get","withCredentials","data","withAuth","isLogined","grade","Component","error","isLoading","promiseFn","fontSize","color","user","success","console","log","alert","push","isHost","isAdmin","message"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,SAASC,QAAT,QAAyB,aAAzB,C,CAEA;AACA;AAEA;AACA;;AAEA,MAAMC,OAAO,GAAG,YAAY;AAC3B,QAAMC,GAAG,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAW,GAAEL,MAAO,iBAApB,EAAsC;AACvDM,IAAAA,eAAe,EAAE;AADsC,GAAtC,CAAlB;AAIA,SAAOF,GAAG,CAACG,IAAX;AACA,CAND;;AAQA,MAAMC,QAAQ,GAAG,CAACC,SAAD,EAAoBC,KAApB,KAChBC,SADsD,IAElD;AACJ,QAAM;AAAEJ,IAAAA,IAAF;AAAQK,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA6BX,QAAQ,CAAC;AAC3CY,IAAAA,SAAS,EAAEX;AADgC,GAAD,CAA3C;AAIA,MAAIU,SAAJ,EAAe,OAAO,mBAAM,qCAAb;AACf,MAAID,KAAJ,EACC,oBACC;AAAK,IAAA,KAAK,EAAE;AAAEG,MAAAA,QAAQ,EAAE,OAAZ;AAAqBC,MAAAA,KAAK,EAAE;AAA5B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAKD,MAAI,CAACT,IAAL,EAAW,OAAO,IAAP;AAEX,QAAMU,IAAU,GAAGV,IAAI,CAACU,IAAxB;;AACA,MAAIV,IAAI,CAACW,OAAT,EAAkB;AACjBC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AACA,QAAIX,SAAS,KAAK,CAAlB,EAAqB;AACpBY,MAAAA,KAAK,CAAC,eAAD,CAAL;AACApB,MAAAA,MAAM,CAACqB,IAAP,CAAY,GAAZ;AACA;;AACD,YAAQZ,KAAR;AACC;AACA,WAAK,CAAL;AACC,eAAOC,SAAP;AACD;;AACA,WAAK,CAAL;AACC,YAAIM,IAAI,CAACM,MAAT,EAAiB,OAAOZ,SAAP;AACjBU,QAAAA,KAAK,CAAC,mBAAD,CAAL;AACApB,QAAAA,MAAM,CAACqB,IAAP,CAAY,GAAZ;AACD;;AACA,WAAK,CAAL;AACC,YAAIL,IAAI,CAACO,OAAT,EAAkB,OAAOb,SAAP;AAClBU,QAAAA,KAAK,CAAC,mBAAD,CAAL;AACApB,QAAAA,MAAM,CAACqB,IAAP,CAAY,GAAZ;AAbF;AAeA,GArBD,MAqBO;AACN;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYb,IAAI,CAACkB,OAAjB,EAA0B,QAA1B;;AAEA,QAAIhB,SAAS,KAAK,CAAlB,EAAqB;AACpBR,MAAAA,MAAM,CAACqB,IAAP,CAAY,QAAZ;AACA,KAFD,MAEO;AACN,aAAOX,SAAP;AACA;AACD,GA9CG,CAgDJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAOA,SAAP;AACA,CAvFD;;AAyFA,eAAeH,QAAf","sourcesContent":["import axios from 'axios';\nimport React, { ReactNode } from 'react';\nimport SERVER from '../../../utils/url';\nimport Router from 'next/router';\nimport { User } from '../../../interfaces';\nimport { useAsync } from 'react-async';\n\n// isLogined\n// 0: 아무나 볼 수 있음, 1: 로그인한 회원만 볼 수 있음, 2: 게스트만 볼 수 있음\n\n// grade\n// 0: 아무나 볼 수 있음, 2: 호스트회원만 볼 수 있음, 3: 관리자회원만 볼 수 있음\n\nconst getAuth = async () => {\n\tconst res = await axios.get(`${SERVER}/api/auth/check`, {\n\t\twithCredentials: true,\n\t});\n\n\treturn res.data;\n};\n\nconst withAuth = (isLogined: number, grade: number) => (\n\tComponent: ReactNode,\n) => {\n\tconst { data, error, isLoading } = useAsync({\n\t\tpromiseFn: getAuth,\n\t});\n\n\tif (isLoading) return () => <></>;\n\tif (error)\n\t\treturn (\n\t\t\t<div style={{ fontSize: '0.5em', color: '#e74c3c' }}>\n\t\t\t\t팔로우정보를 가져오지못했습니다.\n\t\t\t</div>\n\t\t);\n\tif (!data) return null;\n\n\tconst user: User = data.user;\n\tif (data.success) {\n\t\tconsole.log('로그인되어있습니다.');\n\t\tif (isLogined === 2) {\n\t\t\talert('이미 로그인되어있습니다.');\n\t\t\tRouter.push('/');\n\t\t}\n\t\tswitch (grade) {\n\t\t\t// 아무나\n\t\t\tcase 0:\n\t\t\t\treturn Component;\n\t\t\t// 호스트\n\t\t\tcase 1:\n\t\t\t\tif (user.isHost) return Component;\n\t\t\t\talert('접근할 수 없는 페이지 입니다.');\n\t\t\t\tRouter.push('/');\n\t\t\t// 관리자\n\t\t\tcase 2:\n\t\t\t\tif (user.isAdmin) return Component;\n\t\t\t\talert('접근할 수 없는 페이지 입니다.');\n\t\t\t\tRouter.push('/');\n\t\t}\n\t} else {\n\t\t// 로그인되지않음\n\t\tconsole.log('로그인을 해주세요.');\n\t\tconsole.log(data.message, '이것은 에러');\n\n\t\tif (isLogined === 1) {\n\t\t\tRouter.push('/login');\n\t\t} else {\n\t\t\treturn Component;\n\t\t}\n\t}\n\n\t// axios.get(`${SERVER}/api/auth/check`, { withCredentials: true }).then(res => {\n\t// \tconst user: User = res.data.user;\n\t// \tif (res.data.success) {\n\t// \t\tconsole.log('로그인되어있습니다.');\n\t// \t\tif (isLogined === 2) {\n\t// \t\t\talert('이미 로그인되어있습니다.');\n\t// \t\t\tRouter.push('/');\n\t// \t\t}\n\t// \t\tswitch (grade) {\n\t// \t\t\t// 아무나\n\t// \t\t\tcase 0:\n\t// \t\t\t\treturn Component;\n\t// \t\t\t// 호스트\n\t// \t\t\tcase 1:\n\t// \t\t\t\tif (user.isHost) return Component;\n\t// \t\t\t\talert('접근할 수 없는 페이지 입니다.');\n\t// \t\t\t\tRouter.push('/');\n\t// \t\t\t// 관리자\n\t// \t\t\tcase 2:\n\t// \t\t\t\tif (user.isAdmin) return Component;\n\t// \t\t\t\talert('접근할 수 없는 페이지 입니다.');\n\t// \t\t\t\tRouter.push('/');\n\t// \t\t}\n\t// \t} else {\n\t// \t\t// 로그인되지않음\n\t// \t\tconsole.log('로그인을 해주세요.');\n\t// \t\tconsole.log(res.data.message, '이것은 에러');\n\n\t// \t\tif (isLogined === 1) {\n\t// \t\t\tRouter.push('/login');\n\t// \t\t} else {\n\t// \t\t\treturn Component;\n\t// \t\t}\n\t// \t}\n\t// });\n\n\treturn Component;\n};\n\nexport default withAuth;\n"]},"metadata":{},"sourceType":"module"}