{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/zknock/Develop/localhost_web/client/components/main/hoc/withAuth.tsx\";\nimport axios from 'axios';\nimport React from 'react';\nimport SERVER from '../../../utils/url';\nimport Router from 'next/router';\n\n// isLogined\n// 0: 아무나 볼 수 있음, 1: 로그인한 회원만 볼 수 있음, 2: 게스트만 볼 수 있음\n// grade\n// 0: 아무나 볼 수 있음, 2: 호스트회원만 볼 수 있음, 3: 관리자회원만 볼 수 있음\nconst withAuth = (Component, isLogined, grade) => {\n  return Component => {\n    axios.get(`${SERVER}/api/auth/check`).then(res => {\n      const user = res.data.user;\n\n      if (res.data.success) {\n        console.log('로그인되어있습니다.');\n\n        if (isLogined === 2) {\n          Router.push('/');\n        }\n\n        switch (grade) {\n          // 아무나\n          case 0:\n            return /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 14\n            }, this);\n          // 호스트\n\n          case 1:\n            if (user.isHost) return /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 31\n            }, this);\n            alert('접근할 수 없는 페이지 입니다.');\n            Router.push('/');\n          // 관리자\n\n          case 2:\n            if (user.isAdmin) return /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 32\n            }, this);\n            alert('접근할 수 없는 페이지 입니다.');\n            Router.push('/');\n        }\n      } else {\n        // 로그인되지않음\n        console.log('로그인을 해주세요.');\n\n        if (isLogined === 1) {\n          Router.push('/login');\n        } else {\n          return /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this);\n        }\n      }\n    });\n    return /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 10\n    }, this);\n  };\n};\n\nexport default withAuth;","map":{"version":3,"sources":["/Users/zknock/Develop/localhost_web/client/components/main/hoc/withAuth.tsx"],"names":["axios","React","SERVER","Router","withAuth","Component","isLogined","grade","get","then","res","user","data","success","console","log","push","isHost","alert","isAdmin"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAGA;AACA;AAEA;AACA;AAEA,MAAMC,QAAQ,GAAG,CAACC,SAAD,EAAYC,SAAZ,EAA+BC,KAA/B,KAAiD;AACjE,SAAOF,SAAS,IAAI;AACnBL,IAAAA,KAAK,CAACQ,GAAN,CAAW,GAAEN,MAAO,iBAApB,EAAsCO,IAAtC,CAA2CC,GAAG,IAAI;AACjD,YAAMC,IAAU,GAAGD,GAAG,CAACE,IAAJ,CAASD,IAA5B;;AACA,UAAID,GAAG,CAACE,IAAJ,CAASC,OAAb,EAAsB;AACrBC,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AACA,YAAIT,SAAS,KAAK,CAAlB,EAAqB;AACpBH,UAAAA,MAAM,CAACa,IAAP,CAAY,GAAZ;AACA;;AACD,gBAAQT,KAAR;AACC;AACA,eAAK,CAAL;AACC,gCAAO,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AACA,eAAK,CAAL;AACC,gBAAII,IAAI,CAACM,MAAT,EAAiB,oBAAO,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,oBAAP;AACjBC,YAAAA,KAAK,CAAC,mBAAD,CAAL;AACAf,YAAAA,MAAM,CAACa,IAAP,CAAY,GAAZ;AACD;;AACA,eAAK,CAAL;AACC,gBAAIL,IAAI,CAACQ,OAAT,EAAkB,oBAAO,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,oBAAP;AAClBD,YAAAA,KAAK,CAAC,mBAAD,CAAL;AACAf,YAAAA,MAAM,CAACa,IAAP,CAAY,GAAZ;AAbF;AAeA,OApBD,MAoBO;AACN;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AACA,YAAIT,SAAS,KAAK,CAAlB,EAAqB;AACpBH,UAAAA,MAAM,CAACa,IAAP,CAAY,QAAZ;AACA,SAFD,MAEO;AACN,8BAAO,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,kBAAP;AACA;AACD;AACD,KA/BD;AAgCA,wBAAO,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACA,GAlCD;AAmCA,CApCD;;AAsCA,eAAeZ,QAAf","sourcesContent":["import axios from 'axios';\nimport React, { ReactNode } from 'react';\nimport SERVER from '../../../utils/url';\nimport Router from 'next/router';\nimport { User } from '../../../interfaces';\n\n// isLogined\n// 0: 아무나 볼 수 있음, 1: 로그인한 회원만 볼 수 있음, 2: 게스트만 볼 수 있음\n\n// grade\n// 0: 아무나 볼 수 있음, 2: 호스트회원만 볼 수 있음, 3: 관리자회원만 볼 수 있음\n\nconst withAuth = (Component, isLogined: number, grade: number) => {\n\treturn Component => {\n\t\taxios.get(`${SERVER}/api/auth/check`).then(res => {\n\t\t\tconst user: User = res.data.user;\n\t\t\tif (res.data.success) {\n\t\t\t\tconsole.log('로그인되어있습니다.');\n\t\t\t\tif (isLogined === 2) {\n\t\t\t\t\tRouter.push('/');\n\t\t\t\t}\n\t\t\t\tswitch (grade) {\n\t\t\t\t\t// 아무나\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturn <Component />;\n\t\t\t\t\t// 호스트\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tif (user.isHost) return <Component />;\n\t\t\t\t\t\talert('접근할 수 없는 페이지 입니다.');\n\t\t\t\t\t\tRouter.push('/');\n\t\t\t\t\t// 관리자\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tif (user.isAdmin) return <Component />;\n\t\t\t\t\t\talert('접근할 수 없는 페이지 입니다.');\n\t\t\t\t\t\tRouter.push('/');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// 로그인되지않음\n\t\t\t\tconsole.log('로그인을 해주세요.');\n\t\t\t\tif (isLogined === 1) {\n\t\t\t\t\tRouter.push('/login');\n\t\t\t\t} else {\n\t\t\t\t\treturn <Component />;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn <Component />;\n\t};\n};\n\nexport default withAuth;\n"]},"metadata":{},"sourceType":"module"}