{"ast":null,"code":"import _regeneratorRuntime from \"/Users/zknock/Develop/localhost_web/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/zknock/Develop/localhost_web/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport SERVER from '../../../utils/url';\nimport { useAsync } from 'react-async'; // isLogined\n// 0: 아무나 볼 수 있음, 1: 로그인한 회원만 볼 수 있음, 2: 게스트만 볼 수 있음\n// grade\n// 0: 아무나 볼 수 있음, 2: 호스트회원만 볼 수 있음, 3: 관리자회원만 볼 수 있음\n\nvar getAuth = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios.get(\"\".concat(SERVER, \"/api/auth/check\"), {\n              withCredentials: true\n            });\n\n          case 2:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getAuth() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar withAuth = function withAuth(isLogined, grade) {\n  var _s = $RefreshSig$();\n\n  return _s(function (Component) {\n    _s();\n\n    var _useAsync = useAsync({\n      promiseFn: getAuth\n    }),\n        data = _useAsync.data,\n        isLoading = _useAsync.isLoading,\n        error = _useAsync.error;\n\n    axios.get(\"\".concat(SERVER, \"/api/auth/check\"), {\n      withCredentials: true\n    }).then(function (res) {\n      var user = res.data.user;\n\n      if (res.data.success) {\n        console.log('로그인되어있습니다.');\n\n        if (isLogined === 2) {\n          alert('이미 로그인되어있습니다.');\n          location.href = '/';\n        }\n\n        switch (grade) {\n          // 아무나\n          case 0:\n            return Component;\n          // 호스트\n\n          case 1:\n            if (user.isHost) return Component;\n            alert('접근할 수 없는 페이지 입니다.');\n            location.href = '/';\n          // 관리자\n\n          case 2:\n            if (user.isAdmin) return Component;\n            alert('접근할 수 없는 페이지 입니다.');\n            location.href = '/';\n        }\n      } else {\n        // 로그인되지않음\n        console.log('로그인을 해주세요.');\n        console.log(res.data.message, '이것은 에러');\n\n        if (isLogined === 1) {\n          alert('로그인을 해주세요.');\n          location.href = '/login';\n        } else {\n          return Component;\n        }\n      }\n    });\n    return Component;\n  }, \"DWInu5ZRLtSFS71MtZ8FtZQJLeg=\", false, function () {\n    return [useAsync];\n  });\n};\n\nexport default withAuth;","map":{"version":3,"sources":["/Users/zknock/Develop/localhost_web/client/components/main/hoc/withAuth.tsx"],"names":["axios","SERVER","useAsync","getAuth","get","withCredentials","res","data","withAuth","isLogined","grade","Component","promiseFn","isLoading","error","then","user","success","console","log","alert","location","href","isHost","isAdmin","message"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,oBAAnB;AAGA,SAASC,QAAT,QAAyB,aAAzB,C,CAEA;AACA;AAEA;AACA;;AAEA,IAAMC,OAAO;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACGH,KAAK,CAACI,GAAN,WAAaH,MAAb,sBAAsC;AACvDI,cAAAA,eAAe,EAAE;AADsC,aAAtC,CADH;;AAAA;AACTC,YAAAA,GADS;AAAA,6CAKRA,GAAG,CAACC,IALI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPJ,OAAO;AAAA;AAAA;AAAA,GAAb;;AAQA,IAAMK,QAAQ,GAAG,SAAXA,QAAW,CAACC,SAAD,EAAoBC,KAApB;AAAA;;AAAA,YAAsC,UACtDC,SADsD,EAElD;AAAA;;AAAA,oBAC+BT,QAAQ,CAAC;AAC3CU,MAAAA,SAAS,EAAET;AADgC,KAAD,CADvC;AAAA,QACII,IADJ,aACIA,IADJ;AAAA,QACUM,SADV,aACUA,SADV;AAAA,QACqBC,KADrB,aACqBA,KADrB;;AAKJd,IAAAA,KAAK,CAACI,GAAN,WAAaH,MAAb,sBAAsC;AAAEI,MAAAA,eAAe,EAAE;AAAnB,KAAtC,EAAiEU,IAAjE,CAAsE,UAAAT,GAAG,EAAI;AAC5E,UAAMU,IAAU,GAAGV,GAAG,CAACC,IAAJ,CAASS,IAA5B;;AACA,UAAIV,GAAG,CAACC,IAAJ,CAASU,OAAb,EAAsB;AACrBC,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AACA,YAAIV,SAAS,KAAK,CAAlB,EAAqB;AACpBW,UAAAA,KAAK,CAAC,eAAD,CAAL;AACAC,UAAAA,QAAQ,CAACC,IAAT,GAAgB,GAAhB;AACA;;AACD,gBAAQZ,KAAR;AACC;AACA,eAAK,CAAL;AACC,mBAAOC,SAAP;AACD;;AACA,eAAK,CAAL;AACC,gBAAIK,IAAI,CAACO,MAAT,EAAiB,OAAOZ,SAAP;AACjBS,YAAAA,KAAK,CAAC,mBAAD,CAAL;AACAC,YAAAA,QAAQ,CAACC,IAAT,GAAgB,GAAhB;AACD;;AACA,eAAK,CAAL;AACC,gBAAIN,IAAI,CAACQ,OAAT,EAAkB,OAAOb,SAAP;AAClBS,YAAAA,KAAK,CAAC,mBAAD,CAAL;AACAC,YAAAA,QAAQ,CAACC,IAAT,GAAgB,GAAhB;AAbF;AAeA,OArBD,MAqBO;AACN;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYb,GAAG,CAACC,IAAJ,CAASkB,OAArB,EAA8B,QAA9B;;AAEA,YAAIhB,SAAS,KAAK,CAAlB,EAAqB;AACpBW,UAAAA,KAAK,CAAC,YAAD,CAAL;AACAC,UAAAA,QAAQ,CAACC,IAAT,GAAgB,QAAhB;AACA,SAHD,MAGO;AACN,iBAAOX,SAAP;AACA;AACD;AACD,KAnCD;AAqCA,WAAOA,SAAP;AACA,GA7CgB;AAAA,YAGmBT,QAHnB;AAAA;AAAA,CAAjB;;AA+CA,eAAeM,QAAf","sourcesContent":["import axios from 'axios';\nimport React, { ReactNode } from 'react';\nimport SERVER from '../../../utils/url';\nimport Router from 'next/router';\nimport { User } from '../../../interfaces';\nimport { useAsync } from 'react-async';\n\n// isLogined\n// 0: 아무나 볼 수 있음, 1: 로그인한 회원만 볼 수 있음, 2: 게스트만 볼 수 있음\n\n// grade\n// 0: 아무나 볼 수 있음, 2: 호스트회원만 볼 수 있음, 3: 관리자회원만 볼 수 있음\n\nconst getAuth = async () => {\n\tconst res = await axios.get(`${SERVER}/api/auth/check`, {\n\t\twithCredentials: true,\n\t});\n\n\treturn res.data;\n};\n\nconst withAuth = (isLogined: number, grade: number) => (\n\tComponent: ReactNode,\n) => {\n\tconst { data, isLoading, error } = useAsync({\n\t\tpromiseFn: getAuth,\n\t});\n\n\taxios.get(`${SERVER}/api/auth/check`, { withCredentials: true }).then(res => {\n\t\tconst user: User = res.data.user;\n\t\tif (res.data.success) {\n\t\t\tconsole.log('로그인되어있습니다.');\n\t\t\tif (isLogined === 2) {\n\t\t\t\talert('이미 로그인되어있습니다.');\n\t\t\t\tlocation.href = '/';\n\t\t\t}\n\t\t\tswitch (grade) {\n\t\t\t\t// 아무나\n\t\t\t\tcase 0:\n\t\t\t\t\treturn Component;\n\t\t\t\t// 호스트\n\t\t\t\tcase 1:\n\t\t\t\t\tif (user.isHost) return Component;\n\t\t\t\t\talert('접근할 수 없는 페이지 입니다.');\n\t\t\t\t\tlocation.href = '/';\n\t\t\t\t// 관리자\n\t\t\t\tcase 2:\n\t\t\t\t\tif (user.isAdmin) return Component;\n\t\t\t\t\talert('접근할 수 없는 페이지 입니다.');\n\t\t\t\t\tlocation.href = '/';\n\t\t\t}\n\t\t} else {\n\t\t\t// 로그인되지않음\n\t\t\tconsole.log('로그인을 해주세요.');\n\t\t\tconsole.log(res.data.message, '이것은 에러');\n\n\t\t\tif (isLogined === 1) {\n\t\t\t\talert('로그인을 해주세요.');\n\t\t\t\tlocation.href = '/login';\n\t\t\t} else {\n\t\t\t\treturn Component;\n\t\t\t}\n\t\t}\n\t});\n\n\treturn Component;\n};\n\nexport default withAuth;\n"]},"metadata":{},"sourceType":"module"}