{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/zknock/Develop/localhost_web/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/zknock/Develop/localhost_web/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/zknock/Develop/localhost_web/client/components/main/hoc/withAuth.tsx\",\n    _this = this;\n\nimport axios from 'axios';\nimport React from 'react';\nimport SERVER from '../../../utils/url';\nimport Router from 'next/router';\nimport { useAsync } from 'react-async'; // isLogined\n// 0: 아무나 볼 수 있음, 1: 로그인한 회원만 볼 수 있음, 2: 게스트만 볼 수 있음\n// grade\n// 0: 아무나 볼 수 있음, 2: 호스트회원만 볼 수 있음, 3: 관리자회원만 볼 수 있음\n\nvar getAuth = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios.get(\"\".concat(SERVER, \"/api/auth/check\"), {\n              withCredentials: true\n            });\n\n          case 2:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getAuth() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar withAuth = function withAuth(isLogined, grade) {\n  var _s = $RefreshSig$();\n\n  return _s(function (Component) {\n    _s();\n\n    var _useAsync = useAsync({\n      promiseFn: getAuth\n    }),\n        data = _useAsync.data,\n        error = _useAsync.error,\n        isLoading = _useAsync.isLoading;\n\n    if (isLoading) return function () {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n    };\n    if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: '0.5em',\n        color: '#e74c3c'\n      },\n      children: \"\\uD314\\uB85C\\uC6B0\\uC815\\uBCF4\\uB97C \\uAC00\\uC838\\uC624\\uC9C0\\uBABB\\uD588\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 4\n    }, _this);\n    if (!data) return null;\n    var user = data.user;\n\n    if (data.success) {\n      console.log('로그인되어있습니다.');\n\n      if (isLogined === 2) {\n        alert('이미 로그인되어있습니다.');\n        Router.push('/');\n      }\n\n      switch (grade) {\n        // 아무나\n        case 0:\n          return Component;\n        // 호스트\n\n        case 1:\n          if (user.isHost) return Component;\n          alert('접근할 수 없는 페이지 입니다.');\n          Router.push('/');\n        // 관리자\n\n        case 2:\n          if (user.isAdmin) return Component;\n          alert('접근할 수 없는 페이지 입니다.');\n          Router.push('/');\n      }\n    } else {\n      // 로그인되지않음\n      console.log('로그인을 해주세요.');\n      console.log(data.message, '이것은 에러');\n\n      if (isLogined === 1) {\n        Router.push('/login');\n      } else {\n        return Component;\n      }\n    } // axios.get(`${SERVER}/api/auth/check`, { withCredentials: true }).then(res => {\n    // \tconst user: User = res.data.user;\n    // \tif (res.data.success) {\n    // \t\tconsole.log('로그인되어있습니다.');\n    // \t\tif (isLogined === 2) {\n    // \t\t\talert('이미 로그인되어있습니다.');\n    // \t\t\tRouter.push('/');\n    // \t\t}\n    // \t\tswitch (grade) {\n    // \t\t\t// 아무나\n    // \t\t\tcase 0:\n    // \t\t\t\treturn Component;\n    // \t\t\t// 호스트\n    // \t\t\tcase 1:\n    // \t\t\t\tif (user.isHost) return Component;\n    // \t\t\t\talert('접근할 수 없는 페이지 입니다.');\n    // \t\t\t\tRouter.push('/');\n    // \t\t\t// 관리자\n    // \t\t\tcase 2:\n    // \t\t\t\tif (user.isAdmin) return Component;\n    // \t\t\t\talert('접근할 수 없는 페이지 입니다.');\n    // \t\t\t\tRouter.push('/');\n    // \t\t}\n    // \t} else {\n    // \t\t// 로그인되지않음\n    // \t\tconsole.log('로그인을 해주세요.');\n    // \t\tconsole.log(res.data.message, '이것은 에러');\n    // \t\tif (isLogined === 1) {\n    // \t\t\tRouter.push('/login');\n    // \t\t} else {\n    // \t\t\treturn Component;\n    // \t\t}\n    // \t}\n    // });\n\n\n    return Component;\n  }, \"xdv6mW+FJn/9l/oYAM4jNjrm7OY=\", false, function () {\n    return [useAsync];\n  });\n};\n\nexport default withAuth;","map":{"version":3,"sources":["/Users/zknock/Develop/localhost_web/client/components/main/hoc/withAuth.tsx"],"names":["axios","React","SERVER","Router","useAsync","getAuth","get","withCredentials","res","data","withAuth","isLogined","grade","Component","promiseFn","error","isLoading","fontSize","color","user","success","console","log","alert","push","isHost","isAdmin","message"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,SAASC,QAAT,QAAyB,aAAzB,C,CAEA;AACA;AAEA;AACA;;AAEA,IAAMC,OAAO;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACGL,KAAK,CAACM,GAAN,WAAaJ,MAAb,sBAAsC;AACvDK,cAAAA,eAAe,EAAE;AADsC,aAAtC,CADH;;AAAA;AACTC,YAAAA,GADS;AAAA,6CAKRA,GAAG,CAACC,IALI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPJ,OAAO;AAAA;AAAA;AAAA,GAAb;;AAQA,IAAMK,QAAQ,GAAG,SAAXA,QAAW,CAACC,SAAD,EAAoBC,KAApB;AAAA;;AAAA,YAAsC,UACtDC,SADsD,EAElD;AAAA;;AAAA,oBAC+BT,QAAQ,CAAC;AAC3CU,MAAAA,SAAS,EAAET;AADgC,KAAD,CADvC;AAAA,QACII,IADJ,aACIA,IADJ;AAAA,QACUM,KADV,aACUA,KADV;AAAA,QACiBC,SADjB,aACiBA,SADjB;;AAKJ,QAAIA,SAAJ,EAAe,OAAO;AAAA,0BAAM,qCAAN;AAAA,KAAP;AACf,QAAID,KAAJ,EACC,oBACC;AAAK,MAAA,KAAK,EAAE;AAAEE,QAAAA,QAAQ,EAAE,OAAZ;AAAqBC,QAAAA,KAAK,EAAE;AAA5B,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADD;AAKD,QAAI,CAACT,IAAL,EAAW,OAAO,IAAP;AAEX,QAAMU,IAAU,GAAGV,IAAI,CAACU,IAAxB;;AACA,QAAIV,IAAI,CAACW,OAAT,EAAkB;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AACA,UAAIX,SAAS,KAAK,CAAlB,EAAqB;AACpBY,QAAAA,KAAK,CAAC,eAAD,CAAL;AACApB,QAAAA,MAAM,CAACqB,IAAP,CAAY,GAAZ;AACA;;AACD,cAAQZ,KAAR;AACC;AACA,aAAK,CAAL;AACC,iBAAOC,SAAP;AACD;;AACA,aAAK,CAAL;AACC,cAAIM,IAAI,CAACM,MAAT,EAAiB,OAAOZ,SAAP;AACjBU,UAAAA,KAAK,CAAC,mBAAD,CAAL;AACApB,UAAAA,MAAM,CAACqB,IAAP,CAAY,GAAZ;AACD;;AACA,aAAK,CAAL;AACC,cAAIL,IAAI,CAACO,OAAT,EAAkB,OAAOb,SAAP;AAClBU,UAAAA,KAAK,CAAC,mBAAD,CAAL;AACApB,UAAAA,MAAM,CAACqB,IAAP,CAAY,GAAZ;AAbF;AAeA,KArBD,MAqBO;AACN;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYb,IAAI,CAACkB,OAAjB,EAA0B,QAA1B;;AAEA,UAAIhB,SAAS,KAAK,CAAlB,EAAqB;AACpBR,QAAAA,MAAM,CAACqB,IAAP,CAAY,QAAZ;AACA,OAFD,MAEO;AACN,eAAOX,SAAP;AACA;AACD,KA9CG,CAgDJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,WAAOA,SAAP;AACA,GAvFgB;AAAA,YAGmBT,QAHnB;AAAA;AAAA,CAAjB;;AAyFA,eAAeM,QAAf","sourcesContent":["import axios from 'axios';\nimport React, { ReactNode } from 'react';\nimport SERVER from '../../../utils/url';\nimport Router from 'next/router';\nimport { User } from '../../../interfaces';\nimport { useAsync } from 'react-async';\n\n// isLogined\n// 0: 아무나 볼 수 있음, 1: 로그인한 회원만 볼 수 있음, 2: 게스트만 볼 수 있음\n\n// grade\n// 0: 아무나 볼 수 있음, 2: 호스트회원만 볼 수 있음, 3: 관리자회원만 볼 수 있음\n\nconst getAuth = async () => {\n\tconst res = await axios.get(`${SERVER}/api/auth/check`, {\n\t\twithCredentials: true,\n\t});\n\n\treturn res.data;\n};\n\nconst withAuth = (isLogined: number, grade: number) => (\n\tComponent: ReactNode,\n) => {\n\tconst { data, error, isLoading } = useAsync({\n\t\tpromiseFn: getAuth,\n\t});\n\n\tif (isLoading) return () => <></>;\n\tif (error)\n\t\treturn (\n\t\t\t<div style={{ fontSize: '0.5em', color: '#e74c3c' }}>\n\t\t\t\t팔로우정보를 가져오지못했습니다.\n\t\t\t</div>\n\t\t);\n\tif (!data) return null;\n\n\tconst user: User = data.user;\n\tif (data.success) {\n\t\tconsole.log('로그인되어있습니다.');\n\t\tif (isLogined === 2) {\n\t\t\talert('이미 로그인되어있습니다.');\n\t\t\tRouter.push('/');\n\t\t}\n\t\tswitch (grade) {\n\t\t\t// 아무나\n\t\t\tcase 0:\n\t\t\t\treturn Component;\n\t\t\t// 호스트\n\t\t\tcase 1:\n\t\t\t\tif (user.isHost) return Component;\n\t\t\t\talert('접근할 수 없는 페이지 입니다.');\n\t\t\t\tRouter.push('/');\n\t\t\t// 관리자\n\t\t\tcase 2:\n\t\t\t\tif (user.isAdmin) return Component;\n\t\t\t\talert('접근할 수 없는 페이지 입니다.');\n\t\t\t\tRouter.push('/');\n\t\t}\n\t} else {\n\t\t// 로그인되지않음\n\t\tconsole.log('로그인을 해주세요.');\n\t\tconsole.log(data.message, '이것은 에러');\n\n\t\tif (isLogined === 1) {\n\t\t\tRouter.push('/login');\n\t\t} else {\n\t\t\treturn Component;\n\t\t}\n\t}\n\n\t// axios.get(`${SERVER}/api/auth/check`, { withCredentials: true }).then(res => {\n\t// \tconst user: User = res.data.user;\n\t// \tif (res.data.success) {\n\t// \t\tconsole.log('로그인되어있습니다.');\n\t// \t\tif (isLogined === 2) {\n\t// \t\t\talert('이미 로그인되어있습니다.');\n\t// \t\t\tRouter.push('/');\n\t// \t\t}\n\t// \t\tswitch (grade) {\n\t// \t\t\t// 아무나\n\t// \t\t\tcase 0:\n\t// \t\t\t\treturn Component;\n\t// \t\t\t// 호스트\n\t// \t\t\tcase 1:\n\t// \t\t\t\tif (user.isHost) return Component;\n\t// \t\t\t\talert('접근할 수 없는 페이지 입니다.');\n\t// \t\t\t\tRouter.push('/');\n\t// \t\t\t// 관리자\n\t// \t\t\tcase 2:\n\t// \t\t\t\tif (user.isAdmin) return Component;\n\t// \t\t\t\talert('접근할 수 없는 페이지 입니다.');\n\t// \t\t\t\tRouter.push('/');\n\t// \t\t}\n\t// \t} else {\n\t// \t\t// 로그인되지않음\n\t// \t\tconsole.log('로그인을 해주세요.');\n\t// \t\tconsole.log(res.data.message, '이것은 에러');\n\n\t// \t\tif (isLogined === 1) {\n\t// \t\t\tRouter.push('/login');\n\t// \t\t} else {\n\t// \t\t\treturn Component;\n\t// \t\t}\n\t// \t}\n\t// });\n\n\treturn Component;\n};\n\nexport default withAuth;\n"]},"metadata":{},"sourceType":"module"}