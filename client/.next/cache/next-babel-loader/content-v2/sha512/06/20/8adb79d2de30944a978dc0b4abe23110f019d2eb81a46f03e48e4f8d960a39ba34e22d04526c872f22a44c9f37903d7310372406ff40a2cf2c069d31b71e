{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/zknock/Develop/localhost_web/client/pages/hosts/[id].tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport React from 'react';\nimport HostDetail from '../../components/host/HostDetail';\nimport Layout from '../../components/main/Layout';\nimport SERVER from '../../utils/url';\n\nconst HostDetailPage = ({\n  pageProps\n}) => {\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    title: \"\\uD638\\uC2A4\\uD2B8 \\uC815\\uBCF4 | localhost\",\n    children: /*#__PURE__*/_jsxDEV(HostDetail, _objectSpread({}, pageProps), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 3\n  }, this);\n};\n\nexport default HostDetailPage;\nexport const getStaticPaths = async () => {\n  // Get the paths we want to pre-render based on users\n  const paths = await (await axios.get(`${SERVER}/api/host/list`)).data.list.map(host => ({\n    params: {\n      id: host.id.toString()\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  try {\n    const id = params === null || params === void 0 ? void 0 : params.id;\n    const res = await axios.post(`${SERVER}/api/host/load`, {\n      id\n    });\n    const host = res.data.host;\n    const reviews = res.data.reviews;\n    return {\n      props: {\n        host,\n        reviews\n      }\n    };\n  } catch (err) {\n    return {\n      props: {\n        errors: err.message\n      }\n    };\n  }\n};","map":{"version":3,"sources":["/Users/zknock/Develop/localhost_web/client/pages/hosts/[id].tsx"],"names":["axios","React","HostDetail","Layout","SERVER","HostDetailPage","pageProps","getStaticPaths","paths","get","data","list","map","host","params","id","toString","fallback","getStaticProps","res","post","reviews","props","err","errors","message"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,MAAkC,OAAlC;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,OAAOC,MAAP,MAAmB,8BAAnB;AAGA,OAAOC,MAAP,MAAmB,iBAAnB;;AASA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA0B;AAChD,sBACC,QAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,6CAAd;AAAA,2BACC,QAAC,UAAD,oBAAgBA,SAAhB;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAKA,CAND;;AAQA,eAAeD,cAAf;AAEA,OAAO,MAAME,cAA8B,GAAG,YAAY;AACzD;AACA,QAAMC,KAAK,GAAG,MAAM,CACnB,MAAMR,KAAK,CAACS,GAAN,CAAW,GAAEL,MAAO,gBAApB,CADa,EAElBM,IAFkB,CAEbC,IAFa,CAERC,GAFQ,CAEJC,IAAI,KAAK;AACxBC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,EAAE,EAAEF,IAAI,CAACE,EAAL,CAAQC,QAAR;AAAN;AADgB,GAAL,CAFA,CAApB;AAMA,SAAO;AAAER,IAAAA,KAAF;AAASS,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACA,CATM;AAWP,OAAO,MAAMC,cAA8B,GAAG,OAAO;AAAEJ,EAAAA;AAAF,CAAP,KAAsB;AACnE,MAAI;AACH,UAAMC,EAAE,GAAGD,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEC,EAAnB;AACA,UAAMI,GAAG,GAAG,MAAMnB,KAAK,CAACoB,IAAN,CAAY,GAAEhB,MAAO,gBAArB,EAAsC;AAAEW,MAAAA;AAAF,KAAtC,CAAlB;AACA,UAAMF,IAAI,GAAGM,GAAG,CAACT,IAAJ,CAASG,IAAtB;AACA,UAAMQ,OAAO,GAAGF,GAAG,CAACT,IAAJ,CAASW,OAAzB;AAEA,WAAO;AAAEC,MAAAA,KAAK,EAAE;AAAET,QAAAA,IAAF;AAAQQ,QAAAA;AAAR;AAAT,KAAP;AACA,GAPD,CAOE,OAAOE,GAAP,EAAY;AACb,WAAO;AAAED,MAAAA,KAAK,EAAE;AAAEE,QAAAA,MAAM,EAAED,GAAG,CAACE;AAAd;AAAT,KAAP;AACA;AACD,CAXM","sourcesContent":["import axios from 'axios';\nimport { GetStaticPaths, GetStaticProps } from 'next';\nimport React, { useContext } from 'react';\nimport HostDetail from '../../components/host/HostDetail';\nimport Layout from '../../components/main/Layout';\nimport { UserStateContext } from '../../context/user';\nimport { Host, Review } from '../../interfaces';\nimport SERVER from '../../utils/url';\n\ninterface Props {\n\tpageProps: {\n\t\thost: Host;\n\t\treviews: Review[];\n\t};\n}\n\nconst HostDetailPage = ({ pageProps }: Props) => {\n\treturn (\n\t\t<Layout title='호스트 정보 | localhost'>\n\t\t\t<HostDetail {...pageProps} />\n\t\t</Layout>\n\t);\n};\n\nexport default HostDetailPage;\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n\t// Get the paths we want to pre-render based on users\n\tconst paths = await (\n\t\tawait axios.get(`${SERVER}/api/host/list`)\n\t).data.list.map(host => ({\n\t\tparams: { id: host.id.toString() },\n\t}));\n\n\treturn { paths, fallback: false };\n};\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n\ttry {\n\t\tconst id = params?.id;\n\t\tconst res = await axios.post(`${SERVER}/api/host/load`, { id });\n\t\tconst host = res.data.host;\n\t\tconst reviews = res.data.reviews;\n\n\t\treturn { props: { host, reviews } };\n\t} catch (err) {\n\t\treturn { props: { errors: err.message } };\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}