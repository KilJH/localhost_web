{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/zknock/Develop/localhost_web/pages/board/[id].tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport BoardDetail from '../../components/board/BoardDetail';\nimport Layout from '../../components/main/Layout';\nimport mysql from '../../server/db/mysql';\n\nconst BoardDetailPage = ({\n  pageProps\n}) => {\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(BoardDetail, _objectSpread({}, pageProps), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 3\n  }, this);\n};\n\nexport const getStaticPaths = async () => {\n  // Get the paths we want to pre-render based on users\n  const sql = `SELECT board.id FROM board`;\n  let paths = [];\n  mysql.query(sql, (err, rows) => {\n    if (err) return console.log('select err: ', err);\n    paths = rows.idList.map(item => ({\n      params: {\n        id: item.id.toString()\n      }\n    }));\n    return {\n      paths,\n      fallback: false\n    };\n  });\n  return {\n    paths,\n    fallback: false\n  };\n};\nexport const getStaticProps = async () => {\n  // const res = await axios.post(`${SERVER}/api/board/load`, { id: params!.id });\n  return {\n    // props: { board: res.data.board, comments: res.data.comments || [] },\n    props: {}\n  };\n};\nexport default BoardDetailPage;","map":{"version":3,"sources":["/Users/zknock/Develop/localhost_web/pages/board/[id].tsx"],"names":["React","BoardDetail","Layout","mysql","BoardDetailPage","pageProps","getStaticPaths","sql","paths","query","err","rows","console","log","idList","map","item","params","id","toString","fallback","getStaticProps","props"],"mappings":";;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,OAAOC,MAAP,MAAmB,8BAAnB;AAEA,OAAOC,KAAP,MAAkB,uBAAlB;;AASA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA0B;AACjD,sBACC,QAAC,MAAD;AAAA,2BACC,QAAC,WAAD,oBAAiBA,SAAjB;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAKA,CAND;;AAQA,OAAO,MAAMC,cAA8B,GAAG,YAAY;AACzD;AAEA,QAAMC,GAAG,GAAI,4BAAb;AAEA,MAAIC,KAAK,GAAG,EAAZ;AAEAL,EAAAA,KAAK,CAACM,KAAN,CAAYF,GAAZ,EAAiB,CAACG,GAAD,EAAMC,IAAN,KAAe;AAC/B,QAAID,GAAJ,EAAS,OAAOE,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,GAA5B,CAAP;AAETF,IAAAA,KAAK,GAAGG,IAAI,CAACG,MAAL,CAAYC,GAAZ,CAAgBC,IAAI,KAAK;AAChCC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,EAAE,EAAEF,IAAI,CAACE,EAAL,CAAQC,QAAR;AAAN;AADwB,KAAL,CAApB,CAAR;AAIA,WAAO;AAAEX,MAAAA,KAAF;AAASY,MAAAA,QAAQ,EAAE;AAAnB,KAAP;AACA,GARD;AAUA,SAAO;AAAEZ,IAAAA,KAAF;AAASY,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACA,CAlBM;AAoBP,OAAO,MAAMC,cAA8B,GAAG,YAAY;AACzD;AAEA,SAAO;AACN;AACAC,IAAAA,KAAK,EAAE;AAFD,GAAP;AAIA,CAPM;AASP,eAAelB,eAAf","sourcesContent":["import { GetStaticPaths, GetStaticProps } from 'next';\nimport React from 'react';\nimport BoardDetail from '../../components/board/BoardDetail';\nimport Layout from '../../components/main/Layout';\nimport { Board, Comment } from '../../interfaces';\nimport mysql from '../../server/db/mysql';\n\ninterface Props {\n\tpageProps: {\n\t\tboard: Board;\n\t\tcomments: Comment[];\n\t};\n}\n\nconst BoardDetailPage = ({ pageProps }: Props) => {\n\treturn (\n\t\t<Layout>\n\t\t\t<BoardDetail {...pageProps} />\n\t\t</Layout>\n\t);\n};\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n\t// Get the paths we want to pre-render based on users\n\n\tconst sql = `SELECT board.id FROM board`;\n\n\tlet paths = [];\n\n\tmysql.query(sql, (err, rows) => {\n\t\tif (err) return console.log('select err: ', err);\n\n\t\tpaths = rows.idList.map(item => ({\n\t\t\tparams: { id: item.id.toString() },\n\t\t}));\n\n\t\treturn { paths, fallback: false };\n\t});\n\n\treturn { paths, fallback: false };\n};\n\nexport const getStaticProps: GetStaticProps = async () => {\n\t// const res = await axios.post(`${SERVER}/api/board/load`, { id: params!.id });\n\n\treturn {\n\t\t// props: { board: res.data.board, comments: res.data.comments || [] },\n\t\tprops: {},\n\t};\n};\n\nexport default BoardDetailPage;\n"]},"metadata":{},"sourceType":"module"}