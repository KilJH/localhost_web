{"ast":null,"code":"import mysql from '../../../server/db/mysql'; // DATE formatting function\n\nconst formatDate = date => {\n  const day = new Date(date);\n  const now = new Date(); // 날짜가 오늘이면 hh:mm\n\n  const yyyy = day.getFullYear();\n  const MM = day.getMonth() < 9 ? `0${day.getMonth() + 1}` : day.getMonth() + 1;\n  const dd = day.getDate() < 9 ? `0${day.getDate()}` : day.getDate();\n  const hh = day.getHours() < 10 ? `0${day.getHours()}` : day.getHours();\n  const mm = day.getMinutes() < 10 ? `0${day.getMinutes()}` : day.getMinutes();\n\n  if (!(now.getFullYear() - day.getFullYear() || now.getMonth() - day.getMonth() || now.getDate() - day.getDate())) {\n    return `${hh} : ${mm}`;\n  } else {\n    // 아니면 yyyy-MM-dd hh:mm\n    return `${yyyy}-${MM}-${dd} ${hh} : ${mm}`;\n  }\n};\n\nexport default (async (req, res) => {\n  // 전체 게시글\n  // 전체 게시물과 유저정보를 불러온다.\n  // id 컬럼이 중복되기때문에 board.id를 board_id로 별칭을 지어준다 Alias\n  // ORDER BY로 create_time의 역순대로\n  // GROUP BY와 COUNT()를 통해 댓글 수를 카운팅해준다.\n  // comment 내용은 필요없기 때문에 JOIN을 하되 SELECT 하지않는다.\n  const sql = `SELECT board.*, user.*, COUNT(board_comment.id) AS num_comment, board.id AS board_id FROM board LEFT JOIN user ON board.user_id = user.id LEFT JOIN board_comment ON board.id = board_comment.board_id GROUP BY board.id ORDER BY board.create_time DESC`;\n  const page = req.query.page || 1;\n  console.log('넥스트 API');\n  mysql.query(sql, (err, rows) => {\n    if (err) return console.log('select err: ', err);\n    const boards = rows.map(board => {\n      return {\n        id: board.board_id,\n        title: board.title,\n        description: board.description,\n        createTime: formatDate(board.create_time),\n        hit: board.hit,\n        author: {\n          id: board.user_id,\n          name: board.name,\n          email: board.email,\n          nickname: board.nickname,\n          photo: board.photo\n        },\n        numOfComment: board.num_comment\n      };\n    });\n    const results = boards.slice((page - 1) * 10, page * 10);\n    res.status(200).send({\n      success: true,\n      pagedBoards: results,\n      lastIdx: Math.floor(boards.length / 10) + 1,\n      page: page\n    });\n  });\n});","map":null,"metadata":{},"sourceType":"module"}