{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport axios from 'axios';\nimport React from 'react';\nimport Layout from '../../components/main/Layout';\nimport NoticeDetail from '../../components/notice/NoticeDetail';\nimport NoticeList from '../../components/notice/NoticeList';\nimport SERVER from '../../client/utils/url';\n\nconst NoticeDetailPage = ({\n  pageProps\n}) => {\n  return /*#__PURE__*/_jsxs(Layout, {\n    title: `${pageProps.notice.title} | localhost`,\n    children: [/*#__PURE__*/_jsx(NoticeDetail, {\n      notice: pageProps.notice\n    }), /*#__PURE__*/_jsx(\"hr\", {}), /*#__PURE__*/_jsx(\"h3\", {\n      children: \"\\uCD5C\\uADFC \\uACF5\\uC9C0\"\n    }), /*#__PURE__*/_jsx(NoticeList, {\n      notices: pageProps.recentNotices\n    })]\n  });\n};\n\nexport default NoticeDetailPage;\nexport const getStaticPaths = async () => {\n  // Get the paths we want to pre-render based on users\n  const paths = await (await axios.get(`${SERVER}/api/notice/list`)).data.notices.map(notice => ({\n    params: {\n      id: notice.id.toString()\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  try {\n    const id = params === null || params === void 0 ? void 0 : params.id;\n    const res = await axios.get(`${SERVER}/api/notice/${id}`);\n    const notice = res.data.notice;\n    const recRes = await axios.get(`${SERVER}/api/notice/list`);\n    const recentNotices = recRes.data.notices.splice(0, 3);\n    return {\n      props: {\n        notice,\n        recentNotices\n      }\n    };\n  } catch (err) {\n    return {\n      props: {\n        errors: err.message\n      }\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module"}